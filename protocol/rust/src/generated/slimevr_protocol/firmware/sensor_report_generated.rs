// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SensorReportOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SensorReport<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SensorReport<'a> {
  type Inner = SensorReport<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> SensorReport<'a> {
  pub const VT_ORIENTATION: flatbuffers::VOffsetT = 4;
  pub const VT_RAW_TRANS_ACCEL: flatbuffers::VOffsetT = 6;
  pub const VT_RAW_ROT_VEL: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SensorReport { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SensorReportArgs<'args>
  ) -> flatbuffers::WIPOffset<SensorReport<'bldr>> {
    let mut builder = SensorReportBuilder::new(_fbb);
    if let Some(x) = args.raw_rot_vel { builder.add_raw_rot_vel(x); }
    if let Some(x) = args.raw_trans_accel { builder.add_raw_trans_accel(x); }
    if let Some(x) = args.orientation { builder.add_orientation(x); }
    builder.finish()
  }


  #[inline]
  pub fn orientation(&self) -> Option<&'a [super::datatypes::Quat]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, super::datatypes::Quat>>>(SensorReport::VT_ORIENTATION, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn raw_trans_accel(&self) -> Option<&'a [super::datatypes::Vec3f]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, super::datatypes::Vec3f>>>(SensorReport::VT_RAW_TRANS_ACCEL, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn raw_rot_vel(&self) -> Option<&'a [super::datatypes::Vec3f]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, super::datatypes::Vec3f>>>(SensorReport::VT_RAW_ROT_VEL, None).map(|v| v.safe_slice())
  }
}

impl flatbuffers::Verifiable for SensorReport<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, super::datatypes::Quat>>>("orientation", Self::VT_ORIENTATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, super::datatypes::Vec3f>>>("raw_trans_accel", Self::VT_RAW_TRANS_ACCEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, super::datatypes::Vec3f>>>("raw_rot_vel", Self::VT_RAW_ROT_VEL, false)?
     .finish();
    Ok(())
  }
}
pub struct SensorReportArgs<'a> {
    pub orientation: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, super::datatypes::Quat>>>,
    pub raw_trans_accel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, super::datatypes::Vec3f>>>,
    pub raw_rot_vel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, super::datatypes::Vec3f>>>,
}
impl<'a> Default for SensorReportArgs<'a> {
  #[inline]
  fn default() -> Self {
    SensorReportArgs {
      orientation: None,
      raw_trans_accel: None,
      raw_rot_vel: None,
    }
  }
}

pub struct SensorReportBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SensorReportBuilder<'a, 'b> {
  #[inline]
  pub fn add_orientation(&mut self, orientation: flatbuffers::WIPOffset<flatbuffers::Vector<'b , super::datatypes::Quat>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorReport::VT_ORIENTATION, orientation);
  }
  #[inline]
  pub fn add_raw_trans_accel(&mut self, raw_trans_accel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , super::datatypes::Vec3f>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorReport::VT_RAW_TRANS_ACCEL, raw_trans_accel);
  }
  #[inline]
  pub fn add_raw_rot_vel(&mut self, raw_rot_vel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , super::datatypes::Vec3f>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorReport::VT_RAW_ROT_VEL, raw_rot_vel);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SensorReportBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SensorReportBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SensorReport<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for SensorReport<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("SensorReport");
      ds.field("orientation", &self.orientation());
      ds.field("raw_trans_accel", &self.raw_trans_accel());
      ds.field("raw_rot_vel", &self.raw_rot_vel());
      ds.finish()
  }
}
