// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DeviceStatusResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeviceStatusResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeviceStatusResponse<'a> {
  type Inner = DeviceStatusResponse<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> DeviceStatusResponse<'a> {
  pub const VT_RSSI: flatbuffers::VOffsetT = 4;
  pub const VT_IMU_STATUS: flatbuffers::VOffsetT = 6;
  pub const VT_MCU_STATUS: flatbuffers::VOffsetT = 8;
  pub const VT_BATTERY_VOLTAGE: flatbuffers::VOffsetT = 10;
  pub const VT_BATTERY_PCT_ESTIMATE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DeviceStatusResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DeviceStatusResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<DeviceStatusResponse<'bldr>> {
    let mut builder = DeviceStatusResponseBuilder::new(_fbb);
    builder.add_rssi(args.rssi);
    builder.add_battery_pct_estimate(args.battery_pct_estimate);
    builder.add_battery_voltage(args.battery_voltage);
    if let Some(x) = args.mcu_status { builder.add_mcu_status(x); }
    if let Some(x) = args.imu_status { builder.add_imu_status(x); }
    builder.finish()
  }


  #[inline]
  pub fn rssi(&self) -> i64 {
    self._tab.get::<i64>(DeviceStatusResponse::VT_RSSI, Some(0)).unwrap()
  }
  #[inline]
  pub fn imu_status(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::hardware_info::ImuStatus<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::hardware_info::ImuStatus>>>>(DeviceStatusResponse::VT_IMU_STATUS, None)
  }
  #[inline]
  pub fn mcu_status(&self) -> Option<super::hardware_info::McuStatus<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<super::hardware_info::McuStatus>>(DeviceStatusResponse::VT_MCU_STATUS, None)
  }
  #[inline]
  pub fn battery_voltage(&self) -> f32 {
    self._tab.get::<f32>(DeviceStatusResponse::VT_BATTERY_VOLTAGE, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn battery_pct_estimate(&self) -> f32 {
    self._tab.get::<f32>(DeviceStatusResponse::VT_BATTERY_PCT_ESTIMATE, Some(0.0)).unwrap()
  }
}

impl flatbuffers::Verifiable for DeviceStatusResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("rssi", Self::VT_RSSI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::hardware_info::ImuStatus>>>>("imu_status", Self::VT_IMU_STATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::hardware_info::McuStatus>>("mcu_status", Self::VT_MCU_STATUS, false)?
     .visit_field::<f32>("battery_voltage", Self::VT_BATTERY_VOLTAGE, false)?
     .visit_field::<f32>("battery_pct_estimate", Self::VT_BATTERY_PCT_ESTIMATE, false)?
     .finish();
    Ok(())
  }
}
pub struct DeviceStatusResponseArgs<'a> {
    pub rssi: i64,
    pub imu_status: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::hardware_info::ImuStatus<'a>>>>>,
    pub mcu_status: Option<flatbuffers::WIPOffset<super::hardware_info::McuStatus<'a>>>,
    pub battery_voltage: f32,
    pub battery_pct_estimate: f32,
}
impl<'a> Default for DeviceStatusResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    DeviceStatusResponseArgs {
      rssi: 0,
      imu_status: None,
      mcu_status: None,
      battery_voltage: 0.0,
      battery_pct_estimate: 0.0,
    }
  }
}

pub struct DeviceStatusResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeviceStatusResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_rssi(&mut self, rssi: i64) {
    self.fbb_.push_slot::<i64>(DeviceStatusResponse::VT_RSSI, rssi, 0);
  }
  #[inline]
  pub fn add_imu_status(&mut self, imu_status: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::hardware_info::ImuStatus<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeviceStatusResponse::VT_IMU_STATUS, imu_status);
  }
  #[inline]
  pub fn add_mcu_status(&mut self, mcu_status: flatbuffers::WIPOffset<super::hardware_info::McuStatus<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::hardware_info::McuStatus>>(DeviceStatusResponse::VT_MCU_STATUS, mcu_status);
  }
  #[inline]
  pub fn add_battery_voltage(&mut self, battery_voltage: f32) {
    self.fbb_.push_slot::<f32>(DeviceStatusResponse::VT_BATTERY_VOLTAGE, battery_voltage, 0.0);
  }
  #[inline]
  pub fn add_battery_pct_estimate(&mut self, battery_pct_estimate: f32) {
    self.fbb_.push_slot::<f32>(DeviceStatusResponse::VT_BATTERY_PCT_ESTIMATE, battery_pct_estimate, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DeviceStatusResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DeviceStatusResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeviceStatusResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for DeviceStatusResponse<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("DeviceStatusResponse");
      ds.field("rssi", &self.rssi());
      ds.field("imu_status", &self.imu_status());
      ds.field("mcu_status", &self.mcu_status());
      ds.field("battery_voltage", &self.battery_voltage());
      ds.field("battery_pct_estimate", &self.battery_pct_estimate());
      ds.finish()
  }
}
