// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TrackerListFeaturesOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TrackerListFeatures<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TrackerListFeatures<'a> {
  type Inner = TrackerListFeatures<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> TrackerListFeatures<'a> {
  pub const VT_INTERVAL: flatbuffers::VOffsetT = 4;
  pub const VT_COMPLETE: flatbuffers::VOffsetT = 6;
  pub const VT_DEVICE_FEATURES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TrackerListFeatures { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TrackerListFeaturesArgs<'args>
  ) -> flatbuffers::WIPOffset<TrackerListFeatures<'bldr>> {
    let mut builder = TrackerListFeaturesBuilder::new(_fbb);
    if let Some(x) = args.device_features { builder.add_device_features(x); }
    builder.add_interval(args.interval);
    builder.add_complete(args.complete);
    builder.finish()
  }


  #[inline]
  pub fn interval(&self) -> u16 {
    self._tab.get::<u16>(TrackerListFeatures::VT_INTERVAL, Some(0)).unwrap()
  }
  #[inline]
  pub fn complete(&self) -> bool {
    self._tab.get::<bool>(TrackerListFeatures::VT_COMPLETE, Some(false)).unwrap()
  }
  #[inline]
  pub fn device_features(&self) -> Option<DeviceStatusFeatures<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<DeviceStatusFeatures>>(TrackerListFeatures::VT_DEVICE_FEATURES, None)
  }
}

impl flatbuffers::Verifiable for TrackerListFeatures<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("interval", Self::VT_INTERVAL, false)?
     .visit_field::<bool>("complete", Self::VT_COMPLETE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<DeviceStatusFeatures>>("device_features", Self::VT_DEVICE_FEATURES, false)?
     .finish();
    Ok(())
  }
}
pub struct TrackerListFeaturesArgs<'a> {
    pub interval: u16,
    pub complete: bool,
    pub device_features: Option<flatbuffers::WIPOffset<DeviceStatusFeatures<'a>>>,
}
impl<'a> Default for TrackerListFeaturesArgs<'a> {
  #[inline]
  fn default() -> Self {
    TrackerListFeaturesArgs {
      interval: 0,
      complete: false,
      device_features: None,
    }
  }
}

pub struct TrackerListFeaturesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TrackerListFeaturesBuilder<'a, 'b> {
  #[inline]
  pub fn add_interval(&mut self, interval: u16) {
    self.fbb_.push_slot::<u16>(TrackerListFeatures::VT_INTERVAL, interval, 0);
  }
  #[inline]
  pub fn add_complete(&mut self, complete: bool) {
    self.fbb_.push_slot::<bool>(TrackerListFeatures::VT_COMPLETE, complete, false);
  }
  #[inline]
  pub fn add_device_features(&mut self, device_features: flatbuffers::WIPOffset<DeviceStatusFeatures<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<DeviceStatusFeatures>>(TrackerListFeatures::VT_DEVICE_FEATURES, device_features);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TrackerListFeaturesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TrackerListFeaturesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TrackerListFeatures<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for TrackerListFeatures<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("TrackerListFeatures");
      ds.field("interval", &self.interval());
      ds.field("complete", &self.complete());
      ds.field("device_features", &self.device_features());
      ds.finish()
  }
}
