// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DeviceStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeviceStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeviceStatus<'a> {
  type Inner = DeviceStatus<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> DeviceStatus<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_ROLE: flatbuffers::VOffsetT = 8;
  pub const VT_MOUNTING_ROTATION: flatbuffers::VOffsetT = 10;
  pub const VT_ROTATION: flatbuffers::VOffsetT = 12;
  pub const VT_POSITION: flatbuffers::VOffsetT = 14;
  pub const VT_STATUS: flatbuffers::VOffsetT = 16;
  pub const VT_BATTERY: flatbuffers::VOffsetT = 18;
  pub const VT_COMPUTED: flatbuffers::VOffsetT = 20;
  pub const VT_SIGNAL: flatbuffers::VOffsetT = 22;
  pub const VT_TPS: flatbuffers::VOffsetT = 24;
  pub const VT_PING: flatbuffers::VOffsetT = 26;
  pub const VT_EDITABLE: flatbuffers::VOffsetT = 28;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DeviceStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DeviceStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<DeviceStatus<'bldr>> {
    let mut builder = DeviceStatusBuilder::new(_fbb);
    if let Some(x) = args.position { builder.add_position(x); }
    if let Some(x) = args.rotation { builder.add_rotation(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_ping(args.ping);
    builder.add_signal(args.signal);
    builder.add_mounting_rotation(args.mounting_rotation);
    builder.add_editable(args.editable);
    builder.add_tps(args.tps);
    builder.add_computed(args.computed);
    builder.add_battery(args.battery);
    builder.add_status(args.status);
    builder.add_role(args.role);
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u8 {
    self._tab.get::<u8>(DeviceStatus::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DeviceStatus::VT_NAME, None)
  }
  #[inline]
  pub fn role(&self) -> TrackerRole {
    self._tab.get::<TrackerRole>(DeviceStatus::VT_ROLE, Some(TrackerRole::NONE)).unwrap()
  }
  #[inline]
  pub fn mounting_rotation(&self) -> u16 {
    self._tab.get::<u16>(DeviceStatus::VT_MOUNTING_ROTATION, Some(0)).unwrap()
  }
  #[inline]
  pub fn rotation(&self) -> Option<&'a super::datatypes::Quat> {
    self._tab.get::<super::datatypes::Quat>(DeviceStatus::VT_ROTATION, None)
  }
  #[inline]
  pub fn position(&self) -> Option<&'a super::datatypes::Vec3f> {
    self._tab.get::<super::datatypes::Vec3f>(DeviceStatus::VT_POSITION, None)
  }
  #[inline]
  pub fn status(&self) -> TrackerStatus {
    self._tab.get::<TrackerStatus>(DeviceStatus::VT_STATUS, Some(TrackerStatus::NONE)).unwrap()
  }
  #[inline]
  pub fn battery(&self) -> u8 {
    self._tab.get::<u8>(DeviceStatus::VT_BATTERY, Some(0)).unwrap()
  }
  #[inline]
  pub fn computed(&self) -> bool {
    self._tab.get::<bool>(DeviceStatus::VT_COMPUTED, Some(false)).unwrap()
  }
  #[inline]
  pub fn signal(&self) -> i16 {
    self._tab.get::<i16>(DeviceStatus::VT_SIGNAL, Some(0)).unwrap()
  }
  #[inline]
  pub fn tps(&self) -> u8 {
    self._tab.get::<u8>(DeviceStatus::VT_TPS, Some(0)).unwrap()
  }
  #[inline]
  pub fn ping(&self) -> u16 {
    self._tab.get::<u16>(DeviceStatus::VT_PING, Some(0)).unwrap()
  }
  #[inline]
  pub fn editable(&self) -> bool {
    self._tab.get::<bool>(DeviceStatus::VT_EDITABLE, Some(false)).unwrap()
  }
}

impl flatbuffers::Verifiable for DeviceStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<TrackerRole>("role", Self::VT_ROLE, false)?
     .visit_field::<u16>("mounting_rotation", Self::VT_MOUNTING_ROTATION, false)?
     .visit_field::<super::datatypes::Quat>("rotation", Self::VT_ROTATION, false)?
     .visit_field::<super::datatypes::Vec3f>("position", Self::VT_POSITION, false)?
     .visit_field::<TrackerStatus>("status", Self::VT_STATUS, false)?
     .visit_field::<u8>("battery", Self::VT_BATTERY, false)?
     .visit_field::<bool>("computed", Self::VT_COMPUTED, false)?
     .visit_field::<i16>("signal", Self::VT_SIGNAL, false)?
     .visit_field::<u8>("tps", Self::VT_TPS, false)?
     .visit_field::<u16>("ping", Self::VT_PING, false)?
     .visit_field::<bool>("editable", Self::VT_EDITABLE, false)?
     .finish();
    Ok(())
  }
}
pub struct DeviceStatusArgs<'a> {
    pub id: u8,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub role: TrackerRole,
    pub mounting_rotation: u16,
    pub rotation: Option<&'a super::datatypes::Quat>,
    pub position: Option<&'a super::datatypes::Vec3f>,
    pub status: TrackerStatus,
    pub battery: u8,
    pub computed: bool,
    pub signal: i16,
    pub tps: u8,
    pub ping: u16,
    pub editable: bool,
}
impl<'a> Default for DeviceStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    DeviceStatusArgs {
      id: 0,
      name: None,
      role: TrackerRole::NONE,
      mounting_rotation: 0,
      rotation: None,
      position: None,
      status: TrackerStatus::NONE,
      battery: 0,
      computed: false,
      signal: 0,
      tps: 0,
      ping: 0,
      editable: false,
    }
  }
}

pub struct DeviceStatusBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeviceStatusBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u8) {
    self.fbb_.push_slot::<u8>(DeviceStatus::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeviceStatus::VT_NAME, name);
  }
  #[inline]
  pub fn add_role(&mut self, role: TrackerRole) {
    self.fbb_.push_slot::<TrackerRole>(DeviceStatus::VT_ROLE, role, TrackerRole::NONE);
  }
  #[inline]
  pub fn add_mounting_rotation(&mut self, mounting_rotation: u16) {
    self.fbb_.push_slot::<u16>(DeviceStatus::VT_MOUNTING_ROTATION, mounting_rotation, 0);
  }
  #[inline]
  pub fn add_rotation(&mut self, rotation: &super::datatypes::Quat) {
    self.fbb_.push_slot_always::<&super::datatypes::Quat>(DeviceStatus::VT_ROTATION, rotation);
  }
  #[inline]
  pub fn add_position(&mut self, position: &super::datatypes::Vec3f) {
    self.fbb_.push_slot_always::<&super::datatypes::Vec3f>(DeviceStatus::VT_POSITION, position);
  }
  #[inline]
  pub fn add_status(&mut self, status: TrackerStatus) {
    self.fbb_.push_slot::<TrackerStatus>(DeviceStatus::VT_STATUS, status, TrackerStatus::NONE);
  }
  #[inline]
  pub fn add_battery(&mut self, battery: u8) {
    self.fbb_.push_slot::<u8>(DeviceStatus::VT_BATTERY, battery, 0);
  }
  #[inline]
  pub fn add_computed(&mut self, computed: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatus::VT_COMPUTED, computed, false);
  }
  #[inline]
  pub fn add_signal(&mut self, signal: i16) {
    self.fbb_.push_slot::<i16>(DeviceStatus::VT_SIGNAL, signal, 0);
  }
  #[inline]
  pub fn add_tps(&mut self, tps: u8) {
    self.fbb_.push_slot::<u8>(DeviceStatus::VT_TPS, tps, 0);
  }
  #[inline]
  pub fn add_ping(&mut self, ping: u16) {
    self.fbb_.push_slot::<u16>(DeviceStatus::VT_PING, ping, 0);
  }
  #[inline]
  pub fn add_editable(&mut self, editable: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatus::VT_EDITABLE, editable, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DeviceStatusBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DeviceStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeviceStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for DeviceStatus<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("DeviceStatus");
      ds.field("id", &self.id());
      ds.field("name", &self.name());
      ds.field("role", &self.role());
      ds.field("mounting_rotation", &self.mounting_rotation());
      ds.field("rotation", &self.rotation());
      ds.field("position", &self.position());
      ds.field("status", &self.status());
      ds.field("battery", &self.battery());
      ds.field("computed", &self.computed());
      ds.field("signal", &self.signal());
      ds.field("tps", &self.tps());
      ds.field("ping", &self.ping());
      ds.field("editable", &self.editable());
      ds.finish()
  }
}
