// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DeviceStatusFeaturesOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeviceStatusFeatures<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeviceStatusFeatures<'a> {
  type Inner = DeviceStatusFeatures<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> DeviceStatusFeatures<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_ROLE: flatbuffers::VOffsetT = 6;
  pub const VT_MOUNTING_ROTATION: flatbuffers::VOffsetT = 8;
  pub const VT_ROTATION: flatbuffers::VOffsetT = 10;
  pub const VT_POSITION: flatbuffers::VOffsetT = 12;
  pub const VT_STATUS: flatbuffers::VOffsetT = 14;
  pub const VT_BATTERY: flatbuffers::VOffsetT = 16;
  pub const VT_COMPUTED: flatbuffers::VOffsetT = 18;
  pub const VT_SIGNAL: flatbuffers::VOffsetT = 20;
  pub const VT_TPS: flatbuffers::VOffsetT = 22;
  pub const VT_PING: flatbuffers::VOffsetT = 24;
  pub const VT_EDITABLE: flatbuffers::VOffsetT = 26;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DeviceStatusFeatures { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DeviceStatusFeaturesArgs
  ) -> flatbuffers::WIPOffset<DeviceStatusFeatures<'bldr>> {
    let mut builder = DeviceStatusFeaturesBuilder::new(_fbb);
    builder.add_editable(args.editable);
    builder.add_ping(args.ping);
    builder.add_tps(args.tps);
    builder.add_signal(args.signal);
    builder.add_computed(args.computed);
    builder.add_battery(args.battery);
    builder.add_status(args.status);
    builder.add_position(args.position);
    builder.add_rotation(args.rotation);
    builder.add_mounting_rotation(args.mounting_rotation);
    builder.add_role(args.role);
    builder.add_name(args.name);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_NAME, Some(false)).unwrap()
  }
  #[inline]
  pub fn role(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_ROLE, Some(false)).unwrap()
  }
  #[inline]
  pub fn mounting_rotation(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_MOUNTING_ROTATION, Some(false)).unwrap()
  }
  #[inline]
  pub fn rotation(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_ROTATION, Some(false)).unwrap()
  }
  #[inline]
  pub fn position(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_POSITION, Some(false)).unwrap()
  }
  #[inline]
  pub fn status(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_STATUS, Some(false)).unwrap()
  }
  #[inline]
  pub fn battery(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_BATTERY, Some(false)).unwrap()
  }
  #[inline]
  pub fn computed(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_COMPUTED, Some(false)).unwrap()
  }
  #[inline]
  pub fn signal(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_SIGNAL, Some(false)).unwrap()
  }
  #[inline]
  pub fn tps(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_TPS, Some(false)).unwrap()
  }
  #[inline]
  pub fn ping(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_PING, Some(false)).unwrap()
  }
  #[inline]
  pub fn editable(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusFeatures::VT_EDITABLE, Some(false)).unwrap()
  }
}

impl flatbuffers::Verifiable for DeviceStatusFeatures<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("name", Self::VT_NAME, false)?
     .visit_field::<bool>("role", Self::VT_ROLE, false)?
     .visit_field::<bool>("mounting_rotation", Self::VT_MOUNTING_ROTATION, false)?
     .visit_field::<bool>("rotation", Self::VT_ROTATION, false)?
     .visit_field::<bool>("position", Self::VT_POSITION, false)?
     .visit_field::<bool>("status", Self::VT_STATUS, false)?
     .visit_field::<bool>("battery", Self::VT_BATTERY, false)?
     .visit_field::<bool>("computed", Self::VT_COMPUTED, false)?
     .visit_field::<bool>("signal", Self::VT_SIGNAL, false)?
     .visit_field::<bool>("tps", Self::VT_TPS, false)?
     .visit_field::<bool>("ping", Self::VT_PING, false)?
     .visit_field::<bool>("editable", Self::VT_EDITABLE, false)?
     .finish();
    Ok(())
  }
}
pub struct DeviceStatusFeaturesArgs {
    pub name: bool,
    pub role: bool,
    pub mounting_rotation: bool,
    pub rotation: bool,
    pub position: bool,
    pub status: bool,
    pub battery: bool,
    pub computed: bool,
    pub signal: bool,
    pub tps: bool,
    pub ping: bool,
    pub editable: bool,
}
impl<'a> Default for DeviceStatusFeaturesArgs {
  #[inline]
  fn default() -> Self {
    DeviceStatusFeaturesArgs {
      name: false,
      role: false,
      mounting_rotation: false,
      rotation: false,
      position: false,
      status: false,
      battery: false,
      computed: false,
      signal: false,
      tps: false,
      ping: false,
      editable: false,
    }
  }
}

pub struct DeviceStatusFeaturesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeviceStatusFeaturesBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_NAME, name, false);
  }
  #[inline]
  pub fn add_role(&mut self, role: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_ROLE, role, false);
  }
  #[inline]
  pub fn add_mounting_rotation(&mut self, mounting_rotation: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_MOUNTING_ROTATION, mounting_rotation, false);
  }
  #[inline]
  pub fn add_rotation(&mut self, rotation: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_ROTATION, rotation, false);
  }
  #[inline]
  pub fn add_position(&mut self, position: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_POSITION, position, false);
  }
  #[inline]
  pub fn add_status(&mut self, status: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_STATUS, status, false);
  }
  #[inline]
  pub fn add_battery(&mut self, battery: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_BATTERY, battery, false);
  }
  #[inline]
  pub fn add_computed(&mut self, computed: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_COMPUTED, computed, false);
  }
  #[inline]
  pub fn add_signal(&mut self, signal: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_SIGNAL, signal, false);
  }
  #[inline]
  pub fn add_tps(&mut self, tps: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_TPS, tps, false);
  }
  #[inline]
  pub fn add_ping(&mut self, ping: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_PING, ping, false);
  }
  #[inline]
  pub fn add_editable(&mut self, editable: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusFeatures::VT_EDITABLE, editable, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DeviceStatusFeaturesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DeviceStatusFeaturesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeviceStatusFeatures<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for DeviceStatusFeatures<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("DeviceStatusFeatures");
      ds.field("name", &self.name());
      ds.field("role", &self.role());
      ds.field("mounting_rotation", &self.mounting_rotation());
      ds.field("rotation", &self.rotation());
      ds.field("position", &self.position());
      ds.field("status", &self.status());
      ds.field("battery", &self.battery());
      ds.field("computed", &self.computed());
      ds.field("signal", &self.signal());
      ds.field("tps", &self.tps());
      ds.field("ping", &self.ping());
      ds.field("editable", &self.editable());
      ds.finish()
  }
}
