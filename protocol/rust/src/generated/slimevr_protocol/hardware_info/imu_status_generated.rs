// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ImuStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ImuStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ImuStatus<'a> {
  type Inner = ImuStatus<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> ImuStatus<'a> {
  pub const VT_TEMP: flatbuffers::VOffsetT = 4;
  pub const VT_POLL_RATE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ImuStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ImuStatusArgs
  ) -> flatbuffers::WIPOffset<ImuStatus<'bldr>> {
    let mut builder = ImuStatusBuilder::new(_fbb);
    builder.add_poll_rate(args.poll_rate);
    builder.add_temp(args.temp);
    builder.finish()
  }


  #[inline]
  pub fn temp(&self) -> f32 {
    self._tab.get::<f32>(ImuStatus::VT_TEMP, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn poll_rate(&self) -> f32 {
    self._tab.get::<f32>(ImuStatus::VT_POLL_RATE, Some(0.0)).unwrap()
  }
}

impl flatbuffers::Verifiable for ImuStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("temp", Self::VT_TEMP, false)?
     .visit_field::<f32>("poll_rate", Self::VT_POLL_RATE, false)?
     .finish();
    Ok(())
  }
}
pub struct ImuStatusArgs {
    pub temp: f32,
    pub poll_rate: f32,
}
impl<'a> Default for ImuStatusArgs {
  #[inline]
  fn default() -> Self {
    ImuStatusArgs {
      temp: 0.0,
      poll_rate: 0.0,
    }
  }
}

pub struct ImuStatusBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ImuStatusBuilder<'a, 'b> {
  #[inline]
  pub fn add_temp(&mut self, temp: f32) {
    self.fbb_.push_slot::<f32>(ImuStatus::VT_TEMP, temp, 0.0);
  }
  #[inline]
  pub fn add_poll_rate(&mut self, poll_rate: f32) {
    self.fbb_.push_slot::<f32>(ImuStatus::VT_POLL_RATE, poll_rate, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ImuStatusBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ImuStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ImuStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for ImuStatus<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("ImuStatus");
      ds.field("temp", &self.temp());
      ds.field("poll_rate", &self.poll_rate());
      ds.finish()
  }
}
